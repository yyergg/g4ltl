/* G4LTL: Games for LTL Synthesis
 *
 * Copyright (c) 2013, Chih-Hong Cheng
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *   * Neither the name of the <organization> nor the
 *     names of its contributors may be used to endorse or promote products
 *     derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL Chih-Hong Cheng BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package g4ltl;

import g4ltl.utility.CompositionalProblemDescription;
import g4ltl.utility.CompressibilityCheck;
import g4ltl.utility.DefaultFileFilter;
import g4ltl.utility.ProblemDescription;
import g4ltl.utility.PtolemyTemplate;
import g4ltl.utility.SynthesisEngine;
import java.awt.image.BufferedImage;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 * The graphical front-end of G4LTL, used for writing, loading LTL specifications
 * and executing the synthesis engine.
 *
 * @author Chihhong Cheng
 * @version 0.3 2013/02/28
 */
public class GUI extends javax.swing.JFrame {

    protected String lastDir = null;

    /**
     * Creates new GUI
     */
    public GUI() {
        initComponents();
        BufferedImage image = null;
        try {
            image = ImageIO.read(
                    this.getClass().getResource("G4LTL.png"));
        } catch (IOException e) {
        }
        this.setIconImage(image);
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupFrontEnd = new javax.swing.ButtonGroup();
        buttonGroupOutput = new javax.swing.ButtonGroup();
        buttonGroupFeature = new javax.swing.ButtonGroup();
        jPanelSpec = new javax.swing.JPanel();
        jLabelInputSignal = new javax.swing.JLabel();
        jTextFieldInputVariable = new javax.swing.JTextField();
        jLabelOutputVariable = new javax.swing.JLabel();
        jTextFieldOutputVariable = new javax.swing.JTextField();
        jLabelLTLSpec = new javax.swing.JLabel();
        jLabelUnroll = new javax.swing.JLabel();
        jTextFieldUnroll = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextAreaLTLSpec = new javax.swing.JTextArea();
        jLabelTimerVariable = new javax.swing.JLabel();
        jTextFieldTimerVariable = new javax.swing.JTextField();
        jPanelResult = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaResult = new javax.swing.JTextArea();
        jButtonSynthesize = new javax.swing.JButton();
        jButtonClear = new javax.swing.JButton();
        jPanelFrontEnd = new javax.swing.JPanel();
        jRadioButtonLTLBuchi = new javax.swing.JRadioButton();
        jRadioButtonLTL2BA = new javax.swing.JRadioButton();
        jPanelOutputFormat = new javax.swing.JPanel();
        jRadioButtonSAL = new javax.swing.JRadioButton();
        jRadioButtonPsuedoCode = new javax.swing.JRadioButton();
        jRadioButtonPtolemy = new javax.swing.JRadioButton();
        jRadioButtonST = new javax.swing.JRadioButton();
        jPanelFeature = new javax.swing.JPanel();
        jRadioButtonFind = new javax.swing.JRadioButton();
        jRadioButtonDisprove = new javax.swing.JRadioButton();
        jMenuBar = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuItemLoadLTL = new javax.swing.JMenuItem();
        jMenuItemSaveLTL = new javax.swing.JMenuItem();
        jMenuItemSafeResult = new javax.swing.JMenuItem();
        jMenuNumerical = new javax.swing.JMenu();
        jMenuItemNumerical = new javax.swing.JMenuItem();
        jMenuMisc = new javax.swing.JMenu();
        jMenuSetting = new javax.swing.JMenu();
        jMenuItemGroupNumber = new javax.swing.JMenuItem();
        jMenuItemHelp = new javax.swing.JMenuItem();
        jMenuItemAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("G4LTL_ST: LTL synthesis for Structured Texts");
        setIconImages(null);
        setName(""); // NOI18N

        jPanelSpec.setBorder(javax.swing.BorderFactory.createTitledBorder("Specification"));
        jPanelSpec.setPreferredSize(new java.awt.Dimension(658, 290));
        jPanelSpec.setRequestFocusEnabled(false);

        jLabelInputSignal.setText("Input variables:");

        jLabelOutputVariable.setText("Output variables:");

        jLabelLTLSpec.setText("Specification:");

        jLabelUnroll.setText("Unroll steps:");

        jTextFieldUnroll.setText("3");
        jTextFieldUnroll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldUnrollActionPerformed(evt);
            }
        });

        jTextAreaLTLSpec.setColumns(20);
        jTextAreaLTLSpec.setRows(5);
        jScrollPane3.setViewportView(jTextAreaLTLSpec);

        jLabelTimerVariable.setText("Timer variables:");

        org.jdesktop.layout.GroupLayout jPanelSpecLayout = new org.jdesktop.layout.GroupLayout(jPanelSpec);
        jPanelSpec.setLayout(jPanelSpecLayout);
        jPanelSpecLayout.setHorizontalGroup(
            jPanelSpecLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelSpecLayout.createSequentialGroup()
                .add(jPanelSpecLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanelSpecLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(jPanelSpecLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jLabelInputSignal)
                            .add(jLabelOutputVariable)
                            .add(jLabelUnroll))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanelSpecLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jTextFieldUnroll, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 124, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jTextFieldOutputVariable, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 572, Short.MAX_VALUE)
                            .add(jTextFieldInputVariable, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 572, Short.MAX_VALUE)))
                    .add(jPanelSpecLayout.createSequentialGroup()
                        .add(18, 18, 18)
                        .add(jPanelSpecLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jLabelLTLSpec)
                            .add(jLabelTimerVariable))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanelSpecLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 572, Short.MAX_VALUE)
                            .add(jTextFieldTimerVariable, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 572, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanelSpecLayout.setVerticalGroup(
            jPanelSpecLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelSpecLayout.createSequentialGroup()
                .add(jPanelSpecLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabelInputSignal)
                    .add(jTextFieldInputVariable, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanelSpecLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jTextFieldOutputVariable, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabelOutputVariable))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanelSpecLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jTextFieldTimerVariable, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabelTimerVariable))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanelSpecLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanelSpecLayout.createSequentialGroup()
                        .add(jLabelLTLSpec)
                        .add(136, 136, 136))
                    .add(jPanelSpecLayout.createSequentialGroup()
                        .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 149, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)))
                .add(jPanelSpecLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jTextFieldUnroll, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabelUnroll))
                .addContainerGap())
        );

        jPanelResult.setBorder(javax.swing.BorderFactory.createTitledBorder("Result of synthesis"));

        jTextAreaResult.setColumns(20);
        jTextAreaResult.setRows(5);
        jScrollPane1.setViewportView(jTextAreaResult);

        org.jdesktop.layout.GroupLayout jPanelResultLayout = new org.jdesktop.layout.GroupLayout(jPanelResult);
        jPanelResult.setLayout(jPanelResultLayout);
        jPanelResultLayout.setHorizontalGroup(
            jPanelResultLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelResultLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 660, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanelResultLayout.setVerticalGroup(
            jPanelResultLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelResultLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 184, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jButtonSynthesize.setFont(jButtonSynthesize.getFont().deriveFont(jButtonSynthesize.getFont().getSize()-1f));
        jButtonSynthesize.setText("Synthesize");
        jButtonSynthesize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSynthesizeActionPerformed(evt);
            }
        });

        jButtonClear.setFont(jButtonClear.getFont().deriveFont(jButtonClear.getFont().getSize()-1f));
        jButtonClear.setText("Clear");
        jButtonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearActionPerformed(evt);
            }
        });

        jPanelFrontEnd.setBorder(javax.swing.BorderFactory.createTitledBorder("Front-end Translator"));

        buttonGroupFrontEnd.add(jRadioButtonLTLBuchi);
        jRadioButtonLTLBuchi.setFont(jRadioButtonLTLBuchi.getFont().deriveFont(jRadioButtonLTLBuchi.getFont().getSize()-3f));
        jRadioButtonLTLBuchi.setSelected(true);
        jRadioButtonLTLBuchi.setText("LTL2Buchi (Java)");

        buttonGroupFrontEnd.add(jRadioButtonLTL2BA);
        jRadioButtonLTL2BA.setFont(jRadioButtonLTL2BA.getFont().deriveFont(jRadioButtonLTL2BA.getFont().getSize()-3f));
        jRadioButtonLTL2BA.setText("LTL2BA (limited platform)");

        org.jdesktop.layout.GroupLayout jPanelFrontEndLayout = new org.jdesktop.layout.GroupLayout(jPanelFrontEnd);
        jPanelFrontEnd.setLayout(jPanelFrontEndLayout);
        jPanelFrontEndLayout.setHorizontalGroup(
            jPanelFrontEndLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelFrontEndLayout.createSequentialGroup()
                .add(jRadioButtonLTLBuchi)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jRadioButtonLTL2BA)
                .addContainerGap(263, Short.MAX_VALUE))
        );
        jPanelFrontEndLayout.setVerticalGroup(
            jPanelFrontEndLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanelFrontEndLayout.createSequentialGroup()
                .add(0, 0, Short.MAX_VALUE)
                .add(jPanelFrontEndLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jRadioButtonLTLBuchi)
                    .add(jRadioButtonLTL2BA)))
        );

        jPanelOutputFormat.setBorder(javax.swing.BorderFactory.createTitledBorder("Output format"));

        buttonGroupOutput.add(jRadioButtonSAL);
        jRadioButtonSAL.setFont(jRadioButtonSAL.getFont().deriveFont(jRadioButtonSAL.getFont().getSize()-3f));
        jRadioButtonSAL.setText("SAL format");

        buttonGroupOutput.add(jRadioButtonPsuedoCode);
        jRadioButtonPsuedoCode.setFont(jRadioButtonPsuedoCode.getFont().deriveFont(jRadioButtonPsuedoCode.getFont().getSize()-3f));
        jRadioButtonPsuedoCode.setText("Psuedocode");

        buttonGroupOutput.add(jRadioButtonPtolemy);
        jRadioButtonPtolemy.setFont(jRadioButtonPtolemy.getFont().deriveFont(jRadioButtonPtolemy.getFont().getSize()-3f));
        jRadioButtonPtolemy.setText("FSMActor format (Ptolemy II)");

        buttonGroupOutput.add(jRadioButtonST);
        jRadioButtonST.setFont(jRadioButtonST.getFont().deriveFont(jRadioButtonST.getFont().getSize()-3f));
        jRadioButtonST.setSelected(true);
        jRadioButtonST.setText("Structured Text");
        jRadioButtonST.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonSTActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanelOutputFormatLayout = new org.jdesktop.layout.GroupLayout(jPanelOutputFormat);
        jPanelOutputFormat.setLayout(jPanelOutputFormatLayout);
        jPanelOutputFormatLayout.setHorizontalGroup(
            jPanelOutputFormatLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelOutputFormatLayout.createSequentialGroup()
                .add(jRadioButtonST)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jRadioButtonPsuedoCode)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jRadioButtonSAL)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jRadioButtonPtolemy, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(127, 127, 127))
        );
        jPanelOutputFormatLayout.setVerticalGroup(
            jPanelOutputFormatLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelOutputFormatLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(jRadioButtonPsuedoCode)
                .add(jRadioButtonSAL)
                .add(jRadioButtonPtolemy)
                .add(jRadioButtonST))
        );

        jPanelFeature.setBorder(javax.swing.BorderFactory.createTitledBorder("Feature"));

        buttonGroupFeature.add(jRadioButtonFind);
        jRadioButtonFind.setFont(jRadioButtonFind.getFont().deriveFont(jRadioButtonFind.getFont().getSize()-3f));
        jRadioButtonFind.setSelected(true);
        jRadioButtonFind.setText("Find strategy");
        jRadioButtonFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonFindActionPerformed(evt);
            }
        });

        buttonGroupFeature.add(jRadioButtonDisprove);
        jRadioButtonDisprove.setFont(jRadioButtonDisprove.getFont().deriveFont(jRadioButtonDisprove.getFont().getSize()-3f));
        jRadioButtonDisprove.setText("Prove non-existence");
        jRadioButtonDisprove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonDisproveActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanelFeatureLayout = new org.jdesktop.layout.GroupLayout(jPanelFeature);
        jPanelFeature.setLayout(jPanelFeatureLayout);
        jPanelFeatureLayout.setHorizontalGroup(
            jPanelFeatureLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanelFeatureLayout.createSequentialGroup()
                .add(jRadioButtonFind)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jRadioButtonDisprove)
                .addContainerGap(21, Short.MAX_VALUE))
        );
        jPanelFeatureLayout.setVerticalGroup(
            jPanelFeatureLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelFeatureLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(jRadioButtonDisprove)
                .add(jRadioButtonFind))
        );

        jMenuFile.setText("File");

        jMenuItemLoadLTL.setText("Load LTL specification");
        jMenuItemLoadLTL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemLoadLTLActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemLoadLTL);

        jMenuItemSaveLTL.setText("Save LTL specification");
        jMenuItemSaveLTL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSaveLTLActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemSaveLTL);

        jMenuItemSafeResult.setText("Save result");
        jMenuItemSafeResult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSafeResultActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemSafeResult);

        jMenuBar.add(jMenuFile);

        jMenuNumerical.setText("Advanced");

        jMenuItemNumerical.setText("Numerical LTL synthesis");
        jMenuItemNumerical.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNumericalActionPerformed(evt);
            }
        });
        jMenuNumerical.add(jMenuItemNumerical);

        jMenuBar.add(jMenuNumerical);

        jMenuMisc.setText("Misc");

        jMenuSetting.setText("Setting");

        jMenuItemGroupNumber.setText("Number of grouped guarantees");
        jMenuItemGroupNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemGroupNumberActionPerformed(evt);
            }
        });
        jMenuSetting.add(jMenuItemGroupNumber);

        jMenuMisc.add(jMenuSetting);

        jMenuItemHelp.setText("Help");
        jMenuItemHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemHelpActionPerformed(evt);
            }
        });
        jMenuMisc.add(jMenuItemHelp);

        jMenuItemAbout.setText("About");
        jMenuItemAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAboutActionPerformed(evt);
            }
        });
        jMenuMisc.add(jMenuItemAbout);

        jMenuBar.add(jMenuMisc);

        setJMenuBar(jMenuBar);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanelSpec, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 692, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanelOutputFormat, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(jPanelFrontEnd, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(36, 36, 36)
                                .add(jButtonSynthesize)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(jButtonClear, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 76, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jPanelFeature, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanelResult, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanelSpec, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 287, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jPanelFeature, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jButtonSynthesize)
                            .add(jButtonClear)))
                    .add(layout.createSequentialGroup()
                        .add(jPanelFrontEnd, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanelOutputFormat, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanelResult, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelOutputFormat.getAccessibleContext().setAccessibleName("Feature");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSynthesizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSynthesizeActionPerformed
        // Icon which is used in the dialog
        ImageIcon icon = new ImageIcon("src/g4ltl/G4LTL.png");

        if (jRadioButtonLTL2BA.isSelected()) {
            JOptionPane.showMessageDialog(null, "Using LTL2BA is not supported under the BSD version.", "G4LTL", 0, icon);
            return;
        }



        // Decide whether compositional analysis shall be performed.
        /*
        Object[] optionsTechnique = {"CoBuechi", "Buechi"};
        
        int optionTechnique = JOptionPane.showOptionDialog(this, "Specify synthesis techniques", "G4LTL",
        JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE,
        null, optionsTechnique, optionsTechnique[0]);
        
         * 
         */
        int optionTechnique = 0;

        StringBuilder input = new StringBuilder(jTextFieldInputVariable.getText());

        StringBuilder output = new StringBuilder(jTextFieldOutputVariable.getText());
                
        StringBuilder spec = new StringBuilder(jTextAreaLTLSpec.getText());
        if (!jTextFieldTimerVariable.getText().trim().equals("")) {
            // 1. Change all dots by underline
            spec = new StringBuilder(jTextAreaLTLSpec.getText().replace(".", "_"));
            // 2. For every timer, add the corresponding spec
            for (String timer : SolverUtility.getSignals(jTextFieldTimerVariable.getText())) {
                String name = timer.trim().split("\\(")[0];
                //System.out.println(name);
                spec.append("ALWAYS (" + name + "_start -> NEXT (!" + name + "_start UNTIL " + name + "_expire))\n"
                        + "ASSUME ALWAYS (" + name + "_expire -> NEXT (!" + name + "_expire UNTIL " + name + "_start))\n"
                        + "ASSUME ALWAYS (" + name + "_start -> NEXT EVENTUALLY " + name + "_expire)\n");
                input.append(", "+name+"_expire");
                output.append(", "+name+"_start");
                 
            }
        }

        System.out.println("Rewritten input");
        System.out.println(input.toString());
        
        System.out.println("Rewritten output");
        System.out.println(output.toString());
        
        System.out.println("Rewritten spec");
        System.out.println(spec.toString());
        
        CompositionalProblemDescription prob = new CompositionalProblemDescription(SolverUtility.getSignals(input.toString()),
                SolverUtility.getSignals(output.toString()),
                SolverUtility.getSignals(jTextFieldTimerVariable.getText()),
                SolverUtility.parseLTLspecification(SolverUtility.changeSpecToInternalFormat(spec.toString())),
                Integer.parseInt(jTextFieldUnroll.getText()),
                SolverUtility.parseCompositionalLTLspecification(SolverUtility.changeSpecToInternalFormat(spec.toString())));

        /*
        ProblemDescription prob = new ProblemDescription(
        SolverUtility.getSignals(jTextFieldInputSignal.getText()),
        SolverUtility.getSignals(jTextFieldOutputSignal.getText()),
        SolverUtility.parseLTLspecification(SolverUtility.changeSpecToInternalFormat(jTextAreaLTLSpec.getText())),
        Integer.parseInt(jTextFieldUnroll.getText()));
         */

        // Check if optimization can be applied.

        /*
        ArrayList<String> spec = new ArrayList<String>();
        String[] ss = jTextAreaLTLSpec.getText().split("\\n");
        for (String s : ss) {
        if (!s.trim().equals("")) {
        spec.add(s);
        }
        }
        jTextAreaResult.setText("");
        
        CompressibilityCheck check = new CompressibilityCheck();
        check.checkCompressibility(spec, prob);
        
         * 
         */
        
        jTextAreaResult.setText("");
             
        
        int outputOption = SynthesisEngine.OUTPUT_PSUEDO_CODE;
        if (jRadioButtonSAL.isSelected()) {
            outputOption = SynthesisEngine.OUTPUT_SAL;
        } else if (jRadioButtonPtolemy.isSelected()) {
            outputOption = SynthesisEngine.OUTPUT_FSM_ACTOR_PTOLEMY;
        } else if (jRadioButtonST.isSelected()) {
            outputOption = SynthesisEngine.OUTPUT_STRUCTURED_TEXT;
        }

        /*
        if (check.isCompressible() && outputOption != SynthesisEngine.OUTPUT_STRUCTURED_TEXT) {
        // Ask if the user wants to perform automatic compression.
        // ImageIcon icon = new ImageIcon("src/g4ltl/G4LTL.png");
        
        int dialogResult = JOptionPane.showConfirmDialog(null,
        "Specification rewriting possible.\n"
        + "Use it to reduce the synthesis time?", "G4LTL",
        JOptionPane.YES_NO_CANCEL_OPTION,
        JOptionPane.QUESTION_MESSAGE, icon);
        
        if (dialogResult == JOptionPane.YES_OPTION) {
        // Set new output variables
        prob.getOutputVariables().removeAll(check.getRewrittenOutputVariables());
        prob.getOutputVariables().addAll(check.getNewOutputVariables());
        
        // Set new specification
        prob.setLtlSpecification(SolverUtility.parseLTLspecification(
        SolverUtility.changeSpecToInternalFormat(check.getRewrittenSpecification())));
        // Partition into subspecifications (for compositional synthesis)
        prob.setPartialSpecification(SolverUtility.parseCompositionalLTLspecification(
        SolverUtility.changeSpecToInternalFormat(check.getRewrittenSpecification())));
        
        // Print the translation scheme
        jTextAreaResult.append("----- Rewritten specification -----\n");
        jTextAreaResult.append(check.getRewrittenSpecification() + "\n");
        jTextAreaResult.append("----- New output variables -----\n");
        jTextAreaResult.append(check.getNewOutputVariables() + "\n\n");
        jTextAreaResult.append("----- Relation between existing variables & new output variables -----\n");
        
        for (String var : check.getRewrittenOutputVariables()) {
        jTextAreaResult.append("Rewrite " + var + " by : " + CompressibilityCheck.reEncodeValuation(var, check.getPositiveVariableRewriteMap(), check.getNewOutputVariables()) + "\n");
        jTextAreaResult.append("Rewrite !" + var + " by : " + CompressibilityCheck.reEncodeValuation("!" + var, check.getNegativeVariableRewriteMap(), check.getNewOutputVariables()) + "\n");
        }
        if (jRadioButtonPtolemy.isSelected()) {
        jTextAreaResult.append("\n----- Multiplexer (from new variables to original output variables) -----\n");
        jTextAreaResult.append(PtolemyTemplate.createPtolemyMultiplexerCode(check.getNewOutputVariables(),
        check.getRewrittenOutputVariables(),
        check.getOutputCombinationList()) + "\n");
        }
        jTextAreaResult.append("\n----- Result of synthesis -----\n");
        
        } else if (dialogResult == JOptionPane.CANCEL_OPTION) {
        return;
        }
        }
         * 
         */

        // Invoke the engine, and redirect the synthesized result to the result panel.
        SynthesisEngine engine = new SynthesisEngine();


        if (optionTechnique == 0) {

            if (jRadioButtonFind.isSelected()) {
                // Enforce to use LTL2Buchi when NEXT operator is used.
                Object[] options = {"Compositional [Y/N]",
                    "Compositional",
                    "Monolithic"};
                int dialogCompositional = JOptionPane.showOptionDialog(null,
                        "Perform compositional synthesis?",
                        "G4LTL",
                        JOptionPane.YES_NO_CANCEL_OPTION,
                        JOptionPane.QUESTION_MESSAGE, icon,
                        options, options[1]);



                if (dialogCompositional == 0 || dialogCompositional == 1) {
                    boolean isShownStrategy = (dialogCompositional == 0) ? false : true;
                    jTextAreaResult.append("\n" + engine.invokeCompositionalCoBuechiEngine(prob,
                            jRadioButtonLTLBuchi.isSelected(), outputOption,
                            jRadioButtonFind.isSelected(), isShownStrategy).getMessage1());
                } else {
                    jTextAreaResult.append("\n" + engine.invokeMonolithicCoBuechiEngine(prob,
                            jRadioButtonLTLBuchi.isSelected(), outputOption,
                            jRadioButtonFind.isSelected()).getMessage1());
                }
            } else {
                jTextAreaResult.append("\n" + engine.invokeMonolithicCoBuechiEngine(prob,
                        jRadioButtonLTLBuchi.isSelected(), outputOption,
                        jRadioButtonFind.isSelected()).getMessage1());
            }

        } else {
            jTextAreaResult.append("\n" + engine.invokeMonolithicBuechiEngine(prob,
                    jRadioButtonLTLBuchi.isSelected(), outputOption,
                    jRadioButtonFind.isSelected()).getMessage1());
        }
    }//GEN-LAST:event_jButtonSynthesizeActionPerformed

    private void updateTextArea(final String text) {
        SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                jTextAreaResult.append(text);
            }
        });
    }

    private void resetAllFields() {
        // Remove all texts in the input, output, LTL spec, and result
        jTextFieldInputVariable.setText("");
        jTextFieldOutputVariable.setText("");
        jTextFieldTimerVariable.setText("");
        jTextAreaLTLSpec.setText("");

        jTextFieldUnroll.setText("3");
        jTextAreaResult.setText("");
    }

    private void jMenuItemAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAboutActionPerformed
        // Tool name, author, license, contact, icon
        ImageIcon icon = createImageIcon("G4LTL.png", "");
        JOptionPane.showMessageDialog(this,
                "G4LTL: Games for LTL synthesis\n\n"
                + "Copyright (C) 2013 by Chih-Hong Cheng\n"
                + "Contact: cheng.chihhong@gmail.com\n"
                // + "Tool released under GNU GPLv3\n\n"
                + "Tool released under Modified BSD license\n\n"
                + "Library used in G4LTL: \n"
                + "1. JDD v.1.04 (zlib license) \n"
                + "2. LTLBuchi (NOSA license)\n",
                // + "3. LTL2BA4J (GPL license)\n",
                "About",
                JOptionPane.INFORMATION_MESSAGE,
                icon);

    }//GEN-LAST:event_jMenuItemAboutActionPerformed

    private void jMenuItemHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemHelpActionPerformed
        // Trigger the help window
        new Help().setVisible(true);
    }//GEN-LAST:event_jMenuItemHelpActionPerformed

    /**
     * Print the run-time exception to the result panel.
     *
     * @param ex occurred exception
     */
    private void printErrorToResult(Exception ex) {
        StringWriter sw = new StringWriter();
        PrintWriter pw = new PrintWriter(sw);
        ex.printStackTrace(pw);
        jTextAreaResult.append("\n\n------\n" + sw.toString());
    }

    private void jMenuItemLoadLTLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemLoadLTLActionPerformed

        // Open the file from the previously defined directory and access the spec
        String wd = (lastDir != null) ? lastDir : System.getProperty("user.dir");
        HashMap<String, String> spec = null;
        JFileChooser fileLoad = new JFileChooser(wd);
        int choose;
        choose = fileLoad.showDialog(null, "G4LTL: Select the specification");

        switch (choose) {
            case JFileChooser.APPROVE_OPTION:
                File selectedFile = fileLoad.getSelectedFile();
                try {
                    spec = SolverUtility.getLTLSpecificationFromFile(selectedFile);
                } catch (Exception ex) {
                    printErrorToResult(ex);
                }
                lastDir = selectedFile.getParent();
                break;
            case JFileChooser.CANCEL_OPTION:
                // Cancel or the close-dialog icon was clicked
                JOptionPane.showMessageDialog(null, "Oops! You do not select a file actually.");
                return;
            case JFileChooser.ERROR_OPTION:
                // The selection process did not complete successfully
                return;
        }

        // Clear all contents
        resetAllFields();

        // Output the specification to the panel.
        jTextFieldInputVariable.setText(spec.get(SolverUtility.INPUT));
        jTextFieldOutputVariable.setText(spec.get(SolverUtility.OUTPUT));
        jTextFieldTimerVariable.setText(spec.get(SolverUtility.TIMER));
        jTextAreaLTLSpec.setText(spec.get(SolverUtility.LTL));
        jTextAreaResult.setText("");

    }//GEN-LAST:event_jMenuItemLoadLTLActionPerformed

    private void jMenuItemSaveLTLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSaveLTLActionPerformed


        String wd = (lastDir != null) ? lastDir : System.getProperty("user.dir");

        JFileChooser fc = new JFileChooser(wd);
        DefaultFileFilter defaultFilter = new DefaultFileFilter(".txt", "(LTL specification) " + " .txt");
        fc.addChoosableFileFilter(defaultFilter);

        int rc = fc.showDialog(null, "Save");

        if (rc != JFileChooser.APPROVE_OPTION) {
            return;
        } else {
            lastDir = fc.getSelectedFile().getParent();
        }
        String fileName = fc.getSelectedFile().getAbsolutePath();

        String ext = defaultFilter.getExtension();

        if (!fileName.toLowerCase().endsWith(ext)) {
            fileName += ext;
        }


        if (new File(fileName).exists() && JOptionPane.showConfirmDialog(null,
                "Overwrite existing file?") != JOptionPane.YES_OPTION) {
            return;
        }

        BufferedWriter writer = null;
        try {
            writer = new BufferedWriter(new FileWriter(fileName));
            String[] spec = jTextAreaLTLSpec.getText().split("[\\n]");
            for (String s : spec) {
                writer.write(s);
                writer.newLine();
            }
            writer.newLine();
            writer.write("INPUT "
                    + jTextFieldInputVariable.getText());
            writer.newLine();
            writer.write("OUTPUT " + jTextFieldOutputVariable.getText());
            writer.newLine();
        } catch (IOException e) {
        } finally {
            try {
                if (writer != null) {
                    writer.close();
                }
            } catch (IOException e) {
            }
        }

    }//GEN-LAST:event_jMenuItemSaveLTLActionPerformed

    private void jMenuItemSafeResultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSafeResultActionPerformed

        String wd = (lastDir != null) ? lastDir : System.getProperty("user.dir");

        JFileChooser fc = new JFileChooser(wd);
        DefaultFileFilter defaultFilter = new DefaultFileFilter(".txt", "(Strategy) " + " .txt");
        fc.addChoosableFileFilter(defaultFilter);

        int rc = fc.showDialog(null, "Save");

        if (rc != JFileChooser.APPROVE_OPTION) {
            return;
        } else {
            lastDir = fc.getSelectedFile().getParent();
        }
        String fileName = fc.getSelectedFile().getAbsolutePath();

        String ext = defaultFilter.getExtension();

        if (!fileName.toLowerCase().endsWith(ext)) {
            fileName += ext;
        }


        if (new File(fileName).exists() && JOptionPane.showConfirmDialog(null,
                "Overwrite existing file?") != JOptionPane.YES_OPTION) {
            return;
        }

        BufferedWriter writer = null;
        try {
            writer = new BufferedWriter(new FileWriter(fileName));
            String[] spec = jTextAreaResult.getText().split("[\\n]");
            for (String s : spec) {
                writer.write(s);
                writer.newLine();
            }

        } catch (IOException e) {
        } finally {
            try {
                if (writer != null) {
                    writer.close();
                }
            } catch (IOException e) {
            }
        }
    }//GEN-LAST:event_jMenuItemSafeResultActionPerformed

    private void jButtonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClearActionPerformed
        // Remove all texts in the input, output, LTL spec, and result
        resetAllFields();
    }//GEN-LAST:event_jButtonClearActionPerformed

    private void jRadioButtonFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonFindActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButtonFindActionPerformed

    private void jRadioButtonDisproveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonDisproveActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButtonDisproveActionPerformed

private void jMenuItemNumericalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNumericalActionPerformed

    if (!Version.BSD_VERSION) {
        // Icon which is used in the dialog
        ImageIcon icon = new ImageIcon("src/g4ltl/G4LTL.png");
        JOptionPane.showMessageDialog(null, "Using numerical synthesis is not supported in the BSD version.", "G4LTL", 0, icon);
        return;
    }

    // First provide the theory template with the form where every constraint is set to true.
    // Open the file from the previously defined directory and access the spec
    String wd = (lastDir != null) ? lastDir : System.getProperty("user.dir");
    String spec = "";
    JFileChooser fileLoad = new JFileChooser(wd);
    int choose;
    choose = fileLoad.showDialog(null, "Select theory template");

    switch (choose) {
        case JFileChooser.APPROVE_OPTION:
            File selectedFile = fileLoad.getSelectedFile();
            try {
                spec = SolverUtility.getPolynomialSpecificationFromFile(selectedFile);
            } catch (Exception ex) {
                printErrorToResult(ex);
            }
            lastDir = selectedFile.getParent();
            break;
        case JFileChooser.CANCEL_OPTION:
            // Cancel or the close-dialog icon was clicked
            JOptionPane.showMessageDialog(null, "Oops! You do not select a file actually.");
            return;
        case JFileChooser.ERROR_OPTION:
            // The selection process did not complete successfully
            return;
    }

    ProblemDescription prob = new ProblemDescription(
            SolverUtility.getSignals(jTextFieldInputVariable.getText()),
            SolverUtility.getSignals(jTextFieldOutputVariable.getText()),
            SolverUtility.getSignals(jTextFieldTimerVariable.getText()),
            SolverUtility.parseLTLspecification(SolverUtility.changeSpecToInternalFormat(jTextAreaLTLSpec.getText())),
            Integer.parseInt(jTextFieldUnroll.getText()));

    Object[] possibilities = {"1", "2", "3", "4", "5", "6", "7", "8"};
    String iter = (String) JOptionPane.showInputDialog(
            null,
            "Number of CEGAR iterations",
            "CEGAR",
            JOptionPane.PLAIN_MESSAGE,
            null,
            possibilities,
            "1");

    int outputOption = SynthesisEngine.OUTPUT_PSUEDO_CODE;
    if (jRadioButtonSAL.isSelected()) {
        outputOption = SynthesisEngine.OUTPUT_SAL;
    } else if (jRadioButtonPtolemy.isSelected()) {
        outputOption = SynthesisEngine.OUTPUT_FSM_ACTOR_PTOLEMY;
    }

    SolverUtility solver = new SolverUtility();
    jTextAreaResult.setText("");
    // jTextAreaResult.append(solver.invokeNumericalLTLSynthesis(prob, spec, Integer.parseInt(iter), outputOption).getMessage1());

}//GEN-LAST:event_jMenuItemNumericalActionPerformed

private void jMenuItemGroupNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemGroupNumberActionPerformed
// TODO add your handling code here:
    Object[] options = {"No change",
        "1",
        "2",
        "3",
        "4"
    };
    int dialogNumber = JOptionPane.showOptionDialog(null,
            "Current number: " + SolverUtility.MAX_ASSEMBLY_GUARANTEES + ".\n Select to change the value",
            "G4LTL",
            JOptionPane.YES_NO_CANCEL_OPTION,
            JOptionPane.QUESTION_MESSAGE, new ImageIcon("src/g4ltl/G4LTL.png"),
            options, options[1]);

    if (dialogNumber > 0) {
        SolverUtility.setMaxGuaranteeGroupedElements(dialogNumber);
    }
}//GEN-LAST:event_jMenuItemGroupNumberActionPerformed

private void jRadioButtonSTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonSTActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_jRadioButtonSTActionPerformed

private void jTextFieldUnrollActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldUnrollActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_jTextFieldUnrollActionPerformed

    /**
     * Returns an ImageIcon, or null if the path was invalid.
     */
    protected ImageIcon createImageIcon(String path,
            String description) {
        java.net.URL imgURL = getClass().getResource(path);
        if (imgURL != null) {
            return new ImageIcon(imgURL, description);
        } else {
            System.err.println("Couldn't find file: " + path);
            return null;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new GUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupFeature;
    private javax.swing.ButtonGroup buttonGroupFrontEnd;
    private javax.swing.ButtonGroup buttonGroupOutput;
    private javax.swing.JButton jButtonClear;
    private javax.swing.JButton jButtonSynthesize;
    private javax.swing.JLabel jLabelInputSignal;
    private javax.swing.JLabel jLabelLTLSpec;
    private javax.swing.JLabel jLabelOutputVariable;
    private javax.swing.JLabel jLabelTimerVariable;
    private javax.swing.JLabel jLabelUnroll;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenuItem jMenuItemAbout;
    private javax.swing.JMenuItem jMenuItemGroupNumber;
    private javax.swing.JMenuItem jMenuItemHelp;
    private javax.swing.JMenuItem jMenuItemLoadLTL;
    private javax.swing.JMenuItem jMenuItemNumerical;
    private javax.swing.JMenuItem jMenuItemSafeResult;
    private javax.swing.JMenuItem jMenuItemSaveLTL;
    private javax.swing.JMenu jMenuMisc;
    private javax.swing.JMenu jMenuNumerical;
    private javax.swing.JMenu jMenuSetting;
    private javax.swing.JPanel jPanelFeature;
    private javax.swing.JPanel jPanelFrontEnd;
    private javax.swing.JPanel jPanelOutputFormat;
    private javax.swing.JPanel jPanelResult;
    private javax.swing.JPanel jPanelSpec;
    private javax.swing.JRadioButton jRadioButtonDisprove;
    private javax.swing.JRadioButton jRadioButtonFind;
    private javax.swing.JRadioButton jRadioButtonLTL2BA;
    private javax.swing.JRadioButton jRadioButtonLTLBuchi;
    private javax.swing.JRadioButton jRadioButtonPsuedoCode;
    private javax.swing.JRadioButton jRadioButtonPtolemy;
    private javax.swing.JRadioButton jRadioButtonSAL;
    private javax.swing.JRadioButton jRadioButtonST;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextAreaLTLSpec;
    private javax.swing.JTextArea jTextAreaResult;
    private javax.swing.JTextField jTextFieldInputVariable;
    private javax.swing.JTextField jTextFieldOutputVariable;
    private javax.swing.JTextField jTextFieldTimerVariable;
    private javax.swing.JTextField jTextFieldUnroll;
    // End of variables declaration//GEN-END:variables
}
